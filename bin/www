var express = require('express'),
  app = express(),
  path = require('path'),
  http = require('http'),
  passport = require('passport'),
  expressSession = require('express-session'),
  cookieParser = require('cookie-parser'),
  debug = require('debug')('mecatip:server'),
  logger = require('morgan'),
  cors=require('cors'),
  conexionDb = require('./conexion'),
  flash = require('connect-flash'),
  server = http.createServer(app);
  passportManager = require('../passport/modulo/init')(passport),
  utilidades = require('../utilidades/util'),
  headers = require('./headers');
var appManager = require('../appManager');
var socketController = require('../controllers/socket.controller');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use(cors());
appManager(app, cookieParser,  passport, headers, express, path, flash);
socketController(server,cookieParser,passport);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if(isNaN(port)) {
    // named pipe
    return val;
  }
  if(port >= 0) {
    // port number
    return port;
  }
  return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
