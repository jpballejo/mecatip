var utilidades = require('../utilidades/util');
var Palabra = require('../models/palabras.modelo');
//------------------------------------------------------------------------------//
/*
Controlador: Palabras
Create: by Jp.
 */
//------------------------------------------------------------------------------//
/////////////////////////////////////**altaPalabra-POST/////////////////////////////////////////////////////////////////////////////////////
/**
 * [altaPalabra]
 * @param  {[type]}   req  [description]
 * @param  {[type]}   res  [description]
 * @param  {Function} next [description]
 * @return {[type]}        [description]
 */
exports.altaPalabra = function(req, res, next) {
  var nuevaP = new Palabra(req.body);
  nuevaP.save(function(err, palabra) {
    if(err) return next(err);
    if(palabra) {
      res.status(200);
      return res.send("OK");
    }
  });
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////**eliminarLogicamente-DELETE/////////////////////////////////////////////////////////////////////////////////////
/**
 * [eliminarLogicamente]
 * @param  {[type]}   req  [description]
 * @param  {[type]}   res  [description]
 * @param  {Function} next [description]
 * @return {[type]}        [description]
 */
exports.eliminarLogicamente = function(req, res, next) {
  Palabra.where({
    _id: req.body.idPalabra
  }).update({
    isOcultar: true
  }).exec(() => res.send('OK'));
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////**findOneAndDelete-DELETE/////////////////////////////////////////////////////////////////////////////////////
exports.eliminarPalabra = function(req, res, next) {
  Palabra.findByIdAndRemove({
    _id: req.palabra.id
  }, (err, palabra) => {
    if(err) return next(err);
    if(palabra) {
      res.status(200);
      res.toJSON(palabra);
      return res.send('OK, eliminado');
    }
  });
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////**listarPalabras-GET/////////////////////////////////////////////////////////////////////////////////////
exports.getPalabras = (req, res, next) => {
  var query = Palabras.find({});
  query.where({
    isOcultar: false
  });
  query.exec((err, palabras) => {
    if(err) return next(err);
    if(palabras) {
      res.toJSON(palabras);
      return res.send('OK');
    }
    if(!palabras) {
      return res.send('No hay palabras registradas');
    }
  });
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////**listarAllPalabras-GET/////////////////////////////////////////////////////////////////////////////////////
exports.getAllPalabras = (req, res, next) => {
  Palabras.find({}, (err, palabras) => {
    if(err) return next
    if(palabras) {
      res.toJSON(palabras);
      res.send('OK');
    }
  });
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////**buscarYRemplazar-PUT/////////////////////////////////////////////////////////////////////////////////////
exports.buscaYremplaza = (req, res, next) => {
  Palabras.replaceOne({
    _id: req.body.idPalabra
  }, {
    palabra_frase: req.body.palabraNew
  }).exec((err, palabra) => {
    res.toJSON(palabra);
  })
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////**getPalabrasXNivel-GET/////////////////////////////////////////////////////////////////////////////////////
exports.palabrasXlvl = (req, res, next) => {
  var query = Palabras.find({}).where({
    nivel: req.body.lvl
  }).exec((err, palabras) => {
      if(err) return nex(err);
      if(palabras) {
        res.status(200);
        return res.toJSON(palabras);
      }
      if(!palabras) return res.send('No hay palabras registradas');)
  };

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////**getPalabrasPartida-GET/////////////////////////////////////////////////////////////////////////////////////
exports.palabrasXPartida = (req, res, next) => {
  var palabrasArrayXlvl[] = {}
  for(var i = 1, i < 13, i++) {
    palabrasArrayXlvl["lvl" + i] = armarNivel(i);
  }
  if(palabrasArrayXlvl){

  }

};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////**armarNivel/////////////////////////////////////////////////////////////////////////////////////
function armarNivel(lvl) {
  Palabras.findRandom({
    nivel: lvl
  }, {}, {
    limit: 10
  }, (err, resultado) => {
    if(err) return err + 'Nivel: ' + lvl;
    if(resultado) return resultado;
  });
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////****************/////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////****************/////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////****************/////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////****************/////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
